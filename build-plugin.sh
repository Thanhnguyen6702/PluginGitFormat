#!/bin/bash

# Git Commit Message Format Plugin - Build Script
# T√°c gi·∫£: Assistant AI
# Phi√™n b·∫£n: 1.0

echo "üöÄ B·∫Øt ƒë·∫ßu build Git Commit Message Format Plugin..."
echo "=================================================="

# M√†u s·∫Øc cho terminal
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function ƒë·ªÉ log v·ªõi m√†u
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Ki·ªÉm tra Java
log_info "Ki·ªÉm tra Java environment..."
if command -v java &> /dev/null; then
    JAVA_VERSION=$(java -version 2>&1 | head -n 1 | awk -F '"' '{print $2}')
    log_success "Java version: $JAVA_VERSION"
else
    log_error "Java kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y! Vui l√≤ng c√†i ƒë·∫∑t Java."
    exit 1
fi

# Ki·ªÉm tra Gradle wrapper
if [ ! -f "./gradlew" ]; then
    log_error "Gradle wrapper kh√¥ng t√¨m th·∫•y!"
    exit 1
fi

log_success "Gradle wrapper t√¨m th·∫•y"

# Clean project
log_info "L√†m s·∫°ch project c≈©..."
./gradlew clean --no-configuration-cache --quiet
if [ $? -eq 0 ]; then
    log_success "Clean project th√†nh c√¥ng"
else
    log_error "Clean project th·∫•t b·∫°i"
    exit 1
fi

# Build plugin v·ªõi disable configuration cache
log_info "Build plugin (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)..."
./gradlew buildPlugin --no-configuration-cache --quiet
if [ $? -eq 0 ]; then
    log_success "Build plugin th√†nh c√¥ng!"
else
    log_error "Build plugin th·∫•t b·∫°i"
    exit 1
fi

# T√¨m file zip
ZIP_FILE=$(find ./build/distributions -name "*.zip" -type f | head -n 1)

if [ -n "$ZIP_FILE" ]; then
    ZIP_SIZE=$(du -h "$ZIP_FILE" | cut -f1)
    ZIP_NAME=$(basename "$ZIP_FILE")
    
    log_success "Plugin ƒë√£ ƒë∆∞·ª£c build th√†nh c√¥ng!"
    echo "=================================================="
    echo -e "${GREEN}üì¶ File plugin: ${NC}$ZIP_FILE"
    echo -e "${GREEN}üìè K√≠ch th∆∞·ªõc: ${NC}$ZIP_SIZE"
    echo -e "${GREEN}üìù T√™n file: ${NC}$ZIP_NAME"
    echo "=================================================="
    
    # H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t
    echo -e "${BLUE}üîß H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t:${NC}"
    echo "1. M·ªü IntelliJ IDEA"
    echo "2. V√†o File ‚Üí Settings ‚Üí Plugins"
    echo "3. Click v√†o ‚öôÔ∏è ‚Üí Install Plugin from Disk"
    echo "4. Ch·ªçn file: $ZIP_FILE"
    echo "5. Restart IDE"
    echo ""
    
    # Test template directory
    if [ -d "./.github/PULL_REQUEST_TEMPLATE" ]; then
        TEMPLATE_COUNT=$(find ./.github/PULL_REQUEST_TEMPLATE -name "*.md" | wc -l)
        log_success "T√¨m th·∫•y $TEMPLATE_COUNT template files trong .github/PULL_REQUEST_TEMPLATE/"
        echo -e "${BLUE}üìã Templates s·∫µn c√≥:${NC}"
        find ./.github/PULL_REQUEST_TEMPLATE -name "*.md" -exec basename {} .md \; | sed 's/^/  - /'
    else
        log_warning "Ch∆∞a c√≥ th∆∞ m·ª•c .github/PULL_REQUEST_TEMPLATE"
        echo "Plugin s·∫Ω t·∫°o format commit c∆° b·∫£n n·∫øu kh√¥ng c√≥ template"
    fi
    
    echo ""
    log_success "üéâ Ho√†n th√†nh! Plugin ƒë√£ s·∫µn s√†ng ƒë·ªÉ c√†i ƒë·∫∑t."
    
else
    log_error "Kh√¥ng t√¨m th·∫•y file plugin zip!"
    exit 1
fi 